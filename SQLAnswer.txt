Question1:列出位在台北市的客戶ID。
	SELECT CustomerID FROM Customers WHERE City='台北市';

Question2:列出胡椒粉、海鮮粉及辣椒粉的總庫存。
	SELECT SUM(UnitsInStock) FROM Products WHERE ProductName IN('胡椒粉','海鮮粉','辣椒粉');

Question3:列出所有性別是小姐且職稱是業務的員工姓名並依姓名排序。
	SELECT EmployeeName FROM Employees WHERE TitleOfCourtesy='小姐' AND Title='業務' ORDER BY EmployeeName;

Question4:列出曾在2004年（以OrderDate為主）處理訂單的員工ID（不得重複）並排序。
	SELECT DISTINCT EmployeeID FROM Orders WHERE year(OrderDate)='2004';

Question5:列出處理2003年的前十筆訂單（以OrderDate排序）的員工ID。
	SELECT TOP 10 EmployeeID FROM Orders WHERE year(OrderDate)='2003' ORDER BY OrderDate;

Question6:列出地址在屏東且提供至少三樣產品的供應商ID並排序。 *修正
	/*
		從Products, Suppliers這2個table裡找出位於屏東，利用GROUP BY SupplierID分組，找出供應商提供的產品數量 >= 3 (COUNT(SupplierID) >= 3)，
		列出這些供應商的ID
	*/
	SELECT S.SupplierID
	FROM Products P, Suppliers S 
	WHERE S.City LIKE '屏東%' AND P.SupplierID = S.SupplierID
	GROUP BY S.SupplierID
		HAVING COUNT(S.SupplierID) >= 3

Question7:查詢林姓員工的數量。
	/*
	從Employees挑選出員工名字為林姓的員工，並利用COUNT()計算有多少人
	*/
	SELECT count(EmployeeID) AS EmpCount FROM Employees WHERE EmployeeName LIKE '林%';

Question8:列出不提供肉/家禽類和海鮮類產品的供應商CompanyName並排序。
	/*
	首先找出有哪些供應商提供的產品的產品類別為'肉/家禽'、'海鮮' (C.CategoryName IN ('肉/家禽','海鮮'))，找出這些供應商的ID，
	接著再從所有的供應商裡挑出不存在上述結果裡的SupplierID的CompanyName，最後以CompanyName進行排序
	*/
	SELECT S.CompanyName
	FROM Suppliers S
	WHERE S.SupplierID NOT IN (SELECT S.SupplierID
								FROM Categories C, Products P, Suppliers S
								WHERE C.CategoryName IN ('肉/家禽','海鮮') AND P.CategoryID = C.CategoryID
									AND S.SupplierID = P.SupplierID)
		ORDER BY S.CompanyName;

Question9:列出每項產品類別共有多少產品（欄位：類別名稱、數量）並以CategoryID排序。
	/*
	從Products和Categories這2個table裡找出每個CategoryID相對應ProductID的結果，使用GROUP BY CategoryName, CategoryID這兩個欄位進行分組，
	挑出產品類別名稱以及相對應的產品數量，最後以CategoryID排序
	*/
	SELECT C.CategoryName, COUNT(C.CategoryName) AS Num
	FROM Products P, Categories C
	WHERE P.CategoryID = C.CategoryID
	GROUP BY C.CategoryName, C.CategoryID
	ORDER BY C.CategoryID;

Question10:列出在2004年曾經購買過每一種類別至少一項產品的客戶ID並排序。
	/*
	分別先建立2個CTE: CustomerBuy, CategoryCount
	CustomerBuy: 挑出三個欄位(CategoryID, CustomerID)，挑出產品類別ID和顧客ID，在2004年曾買過產品，利用GROUP BY CategoryID, CustomerID分組
	CategoryCount: 計算出Categories這個table有多少筆資料，並將值存成C_Count
	
	接著透過上述2個CTE，使用COUNT(CustomerBuy.CustomerID)算出每個顧客有買過哪幾種類別的產品，找出COUNT()等於類別數量的顧客ID
	*/
	WITH CustomerBuys (CategoryID, CustomerID) 
	AS
	(
		SELECT C.CategoryID, O.CustomerID
		FROM Orders O, OrderDetails OD, Products P, Categories C
		WHERE YEAR(O.OrderDate) = '2004' AND O.OrderID = OD.OrderID AND P.ProductID = OD.ProductID
				AND C.CategoryID = P.CategoryID
		GROUP BY C.CategoryID, O.CustomerID
	),
	CategoryCount (C_Count)
	AS
	(
		SELECT COUNT(C.CategoryID) AS C_Count
		FROM Categories C
	)
	SELECT CB.CustomerID
	FROM CustomerBuys CB, CategoryCount CC
	GROUP BY CB.CustomerID, CC.C_Count
	HAVING COUNT(CB.CustomerID) >= CC.C_Count

Question11:依照年度（OrderDate）列出該年度訂單總數、總訂單金額（UnitPrice * Quantity * (1-Discount)）、平均每筆訂單金額（金額皆四捨五入至小數點後第二位）並以總金額排序由大到小排序。
	/*
	建立一個CTE: YearBuys
	YearBuys: 從Order找出每年度有多少訂單數量，分別有兩個欄位(Years, Counts)每一年有多少訂單
	
	從OrderDetail和Order找出相同OrderID的結果，利用GROUP BY Years, Counts分組，計算出每個年度底下訂單的總金額以及平均每筆訂單的金額，
	挑出每個年度的訂單數量，每個年度總金額以及每個年度平均每張訂單的金額
	*/
	With YearBuys(Years, Counts)
	AS
	(
		SELECT YEAR(O.OrderDate) AS Years, COUNT(YEAR(O.OrderDate)) AS Counts
		FROM Orders O
		GROUP BY YEAR(O.OrderDate)
	)
	SELECT YB.Years, YB.Counts, ROUND(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)), 2) AS PriceSum,
		ROUND(SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) / YB.Counts, 2) AS PriceAverage
	FROM Orders O, OrderDetails OD, YearBuys YB
	WHERE O.OrderID = OD.OrderID AND YEAR(O.OrderDate) = YB.Years
	GROUP BY YB.Years, YB.Counts
	ORDER BY PriceSum DESC;

Question12:列出在2002年負責20筆以上訂單的員工ID並以員工ID排序。
	/*
	從Orders找出訂單日期為2002年，並以EmployeeID分組，找出每個員工處理過的訂單數量是否>=20 COUNT(*)>=20，
	挑出這些員工的ID
	*/
	SELECT Orders.EmployeeID 
	FROM Orders 
	WHERE YEAR(OrderDate)='2002' 
	GROUP BY EmployeeId 
	HAVING COUNT(*) >= 20;  

Question13:分別列出每一年使用次數最多的貨運方式ID。
	/*
	建立兩個CTE: ShipViaYear, ShipMaxVia
	ShipViaYear: 找出每個年度分別使用哪種方式進行運輸(ShipVia)，以及運輸次數(ShipVias)，以年度進行分組 
	ShipMaxVia: 挑出每個年度最大的運輸次數

	接著使用以上2個CTE，以ShipViaYear的運輸次數 = ShipMaxVia的最大運輸次數的條件找出每個年度最多的運輸次數以及運輸方式
	*/
	With ShipViaYear(Years, ShipVias, ShipVia)
	AS
	(
		SELECT YEAR(O.OrderDate) AS Years, COUNT(O.ShipVia) AS ShipVias, O.ShipVia
		FROM Orders O
		GROUP BY YEAR(O.OrderDate), O.ShipVia
	),
	ShipMaxVia(Years, ShipVias)
	AS
	(
		SELECT SVY.Years, MAX(SVY.ShipVias)
		FROM ShipViaYear SVY
		GROUP BY SVY.Years
	)
	SELECT SVY.Years, SVY.ShipVia
	FROM ShipMaxVia SMV, ShipViaYear SVY
	WHERE SVY.Years = SMV.Years AND SVY.ShipVias = SMV.ShipVias

Question14:列出曾經處理過「凱誠國際顧問公司」和「師大貿易」的訂單的員工ID及姓名並以ID排序。
	/*
		選取負責公司名稱為'凱誠國際顧問公司'的員工ID和員工姓名，以及選取負責公司名稱為'師大貿易'的員工ID和員工姓名
		將這兩個結果進行交集，能得到同時處理這兩家公司的員工ID和姓名，並以員工ID排序
	*/
	SELECT E.EmployeeID, E.EmployeeName
	FROM Orders O, Customers C, Employees E
	WHERE O.CustomerID = C.CustomerID AND E.EmployeeID = O.EmployeeID AND C.CompanyName = '凱誠國際顧問公司'
	INTERSECT
	SELECT E.EmployeeID, E.EmployeeName
	FROM Orders O, Customers C, Employees E
	WHERE O.CustomerID = C.CustomerID AND E.EmployeeID = O.EmployeeID AND C.CompanyName = '師大貿易'
	ORDER BY E.EmployeeID;

Question15:列出六月出生的員工姓名並排序。
	/*
	從Employees選取生日為6月的員工姓名，並以員工姓名排序
	*/
	SELECT EmployeeName From Employees WHERE month(BirthDate)='6' ORDER BY EmployeeName;

Question16:列出送貨日期延誤的訂單編號（ShippedDate晚於RequiredDate）及延誤天數並以訂單編號排序。
	/*
	從Orders先確認ShippedDate > RequiredDate的結果，並選出OrderID和這筆Order的延遲時間
	*/
	SELECT O.OrderID, DATEDIFF(DD, O.RequiredDate, O.ShippedDate) AS DelayDays
	FROM Orders O
	WHERE O.ShippedDate > O.RequiredDate;

Question17:列出主管ID、姓名、薪資、其管理的下屬數量和下屬平均薪資。以主管ID排序。
	/*
	建立一個CTE: ManagerAndEmployeeSalary
	ManagerAndEmployeeSalary: 用兩個Employees E1, E2，以E1.EmployeeID = E2.ManagerID的條件，挑出主管ID，主管姓名，主管薪水，員工姓名，員工薪水

	再從ManagerAndEmployeeSalary裡挑出主管ID，主管姓名，主管薪水，以及計算每個主管底下的下屬的薪水總和，和每個主管底下的下屬平均薪水
	*/
	With ManagerAndEmployeeSalary(EmployeeID, Manager, ManagerSalary, EmployeeName, Salary)
	AS
	(
		SELECT E1.EmployeeID, E1.EmployeeName AS Manager, E1.Salary AS ManagerSalary, E2.EmployeeName, E2.Salary
		FROM Employees E1, Employees E2
		WHERE E1.EmployeeID = E2.ManagerID
		GROUP BY E1.EmployeeID, E1.EmployeeName, E1.Salary, E2.EmployeeName, E2.Salary
	)
	SELECT MAES.EmployeeID, MAES.Manager AS EmployeeName, MAES.ManagerSalary AS Salary, COUNT(MAES.EmployeeName) AS SubCount, AVG(MAES.Salary) AS SubAverageSalary
	FROM ManagerAndEmployeeSalary MAES
	GROUP BY MAES.EmployeeID, MAES.Manager, MAES.ManagerSalary
	ORDER BY MAES.EmployeeID;


Question18:列出產品編號、名稱、庫存量UnitsInStock、已訂購量UnitsOnOrder及安全存量ReorderLevel，並新增一欄位其值為'safe'（庫存量 >= 安全存量）
	或'reordering'（庫存量 < 安全存量 & 已訂購量+庫存量 >= 安全存量）或'unsafe'（其他）。
	/*
	從Products裡選取ProductID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel, Status
	Status值的設定條件為:
		 UnitsInStock >= ReorderLevel : 'safe'
		 UnitsInStock < ReorderLevel & UnitsInStock + UnitsOnOrder >= ReorderLevel : reordering
		 其餘情況設為'unsafe'
	*/
	SELECT P.ProductID, P.ProductName, P.UnitsInStock, P.UnitsOnOrder, P.ReorderLevel, 
		CASE
		WHEN P.UnitsInStock >= P.ReorderLevel THEN 'safe' 
		WHEN P.UnitsInStock < P.ReorderLevel AND P.UnitsInStock + P.UnitsOnOrder >= P.ReorderLevel THEN 'reordering' 
		ELSE 'unsafe' 
		END
			'Status'
	FROM Products P;

Question19:列出2004年三月總成交金額最多的5名員工ID及成交金額並以成交金額由大到小排序。
	/*
	WHERE的條件: 訂單日期為2004年的3月以及找出Orders和OrderDetails相同的OrderID，以EmployeeID分組以及員工處理訂單的總金額由大到小排序，接著從前面的結果裡挑出前5位員工的ID以及他們各自負責訂單的總金額AS TotalPrice
	*/
	SELECT TOP 5 O.EmployeeID, SUM(OD.UnitPrice * OD.Quantity * (1 - OD.Discount)) AS TotalPrice
	FROM Orders O, OrderDetails OD
	WHERE O.OrderID = OD.OrderID AND YEAR(O.OrderDate) = '2004' AND MONTH(O.OrderDate) = '3'
		GROUP BY O.EmployeeID
		ORDER BY TotalPrice DESC;

Question20:列出2003年平均每月訂單數。
	/*
	MonthOrders: 從Orders裡選取在2003年每個月的訂單數量( COUNT( O.OrderID ) AS OrderCounts )，以月分做分組的行為，挑出的欄位有OrderMonth, OrderCounts。
	從MonthOrders這個結果裡使用AVG()算出在2003年平均每個月的訂單數量
	*/
	SELECT AVG(MonthOrders.OrderCounts) AS AvgOrderCnt
	FROM(SELECT MONTH(O.OrderDate) AS OrderMonth, COUNT( O.OrderID ) AS OrderCounts
		FROM Orders O
		WHERE YEAR(O.OrderDate) = '2003'
			GROUP BY MONTH(O.OrderDate)) MonthOrders;

Question21:依照客戶的送貨城市列出各城市訂購的各種類別的訂單數量。以ShipCity及Category排序。
	/*
	從Orders, OrderDetails, Products, Categories這4個table挑出串連的資料，從這些資料中以CategoryID, ShipCity這2個欄位用GROUP BY做分組，
	挑出ShipCity, CategoryID, 以及各個送貨城市的產品類別的訂單數量，以ShipCity排列
	*/
	SELECT O.ShipCity, C.CategoryID, COUNT(P.ProductName) AS Cnt
	FROM Orders O, OrderDetails OD, Products P, Categories C
	WHERE O.OrderID = OD.OrderID AND OD.ProductID = P.ProductID AND P.CategoryID = C.CategoryID
		GROUP BY C.CategoryID, O.ShipCity
		ORDER BY O.ShipCity;

Question22:新增一trigger名為shippers_trigger，當對資料表Shippers進行新增、修改、刪除操作後，
將操作紀錄到日誌表ShippersLog（已存在）
	/*
	先確認shippers_trigger是否存在，如果存在的話刪除這張表
	建立trigger shippers_trigger，當Shippers執行insert, update, delete後會將改變的資料寫進ShippersLog 
	*/
	IF OBJECT_ID('shippers_trigger','TR') IS NOT NULL
		DROP TRIGGER shippers_trigger;
	GO
	CREATE TRIGGER shippers_trigger ON Shippers 
	AFTER INSERT, UPDATE, DELETE
	AS
	BEGIN
		IF EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted)
		BEGIN
			INSERT INTO ShippersLog SELECT GETDATE(), 'UPDATE' , deleted.ShipperID, deleted.CompanyName, deleted.Phone, inserted.ShipperID, inserted.CompanyName, inserted.Phone FROM deleted, inserted WHERE inserted.shipperID = deleted.shipperID;
		END
		ELSE IF EXISTS (SELECT 1 FROM inserted) AND NOT EXISTS (SELECT 1 FROM deleted)
		BEGIN
			INSERT INTO ShippersLog SELECT GETDATE(), 'INSERT', NULL, NULL, NULL, * FROM inserted;
		END	
		ELSE IF NOT EXISTS (SELECT 1 FROM inserted) AND EXISTS (SELECT 1 FROM deleted)
		BEGIN
			INSERT INTO ShippersLog SELECT GETDATE(), 'DELETE', *, NULL, NULL, NULL FROM deleted;
		END
	END
	GO

Question23:調整薪資，全年處理50筆以上訂單的員工薪資加5%，處理100筆以上訂單則加10%，最多加5000元，且不得高於其主管。
	/*
	這裡建立4個CTE，EmployeePays, EmployeeLevel, EmployeeCnt, EmployeePaySalary
	EmployeePays: 從Employee和Orders遞迴找出主管以及主管的下屬，選出的欄位有EmployeeID, EmployeeName, Manager
	EmployeeLevel: 將EmployeePays和Employee做串接的動作，選出每個員工的ID, 姓名, 薪資, 以及上司的ID
	EmployeeCnt: 從Employees和Orders以員工ID和員工姓名做分組條件，挑出員工ID, 員工姓名, 以及他們各自處理的訂單數量 ( COUNT(O.OrderID) )
	EmployeePaySalary: 從EmployeeLevel, EmployeeCnt這2個CTE遞迴計算上司以及其下屬的薪資加成，下屬的薪資加成幅度不得超過上司的薪資，如果超過的話設定為跟上司一樣的薪資，
		這個CTE處理完的結果只會出現有調整過薪資的員工以及調整過後的薪資

	將EmployeePaySalary裡面每筆資料更新到Employees裡，更新需要薪資調整的員工的薪資
	;
	*/
	WITH EmployeePays(EmployeeID, EmployeeName, Manager)
	AS
	(
		SELECT E.EmployeeID, E.EmployeeName, E.ManagerID
		FROM Employees E, Orders O
		WHERE E.ManagerID IS NULL AND O.EmployeeID = E.EmployeeID
		UNION ALL
		SELECT E.EmployeeID, E.EmployeeName, E.ManagerID
		FROM Employees E
			INNER JOIN EmployeePays EP ON EP.EmployeeID = E.ManagerID
	),
	EmployeeLevel(EmployeeID, EmployeeName, Salary, Manager)
	AS
	(
		SELECT EP.EmployeeID, EP.EmployeeName, E.Salary, EP.Manager
		FROM EmployeePays EP, Employees E
		WHERE EP.EmployeeID = E.EmployeeID
			GROUP BY EP.EmployeeID, EP.EmployeeName, E.Salary, EP.Manager
	),
	EmployeeCnt(EmployeeID, EmployeeName, Cnt)
	AS
	(
		SELECT E.EmployeeID, E.EmployeeName, COUNT(O.OrderID)
		FROM Employees E, Orders O
		WHERE O.EmployeeID = E.EmployeeID
			GROUP BY E.EmployeeID, E.EmployeeName
	),
	EmployeePaySalary(EmployeeID, EmployeeName, Manager, Salary)
	AS
	(
		SELECT EL.EmployeeID, EL.EmployeeName, EL.Manager, CASE
		WHEN EC.Cnt > 100 AND EL.Salary * 1.1 - EL.Salary <= 5000 THEN EL.Salary * 1.1
		WHEN EC.Cnt > 50 AND EL.Salary * 1.05 - EL.Salary <= 5000 THEN EL.Salary * 1.05
		ELSE EL.Salary
		END 'Salary'
		FROM EmployeeLevel EL, EmployeeCnt EC
		WHERE EL.EmployeeID = EC.EmployeeID AND EL.Manager IS NULL
		UNION ALL
		SELECT EL.EmployeeID, EL.EmployeeName, EL.Manager, CASE
		WHEN EC.Cnt > 100 AND EL.Salary * 1.1 > EPS.Salary THEN EPS.Salary
		WHEN EC.Cnt > 50 AND EL.Salary * 1.05 > EPS.Salary THEN EPS.Salary
		WHEN EC.Cnt > 100 AND EL.Salary * 1.1 - EL.Salary > 5000 THEN EL.Salary + 5000
		WHEN EC.Cnt > 50 AND EL.Salary * 1.05 - EL.Salary > 5000 THEN EL.Salary + 5000
		WHEN EC.Cnt > 100 AND EL.Salary * 1.1 - EL.Salary <= 5000 THEN EL.Salary * 1.1
		WHEN EC.Cnt > 50 AND EL.Salary * 1.05 - EL.Salary <= 5000 THEN EL.Salary * 1.05
		ELSE EL.Salary
		END 'Salary'
		FROM EmployeeLevel EL, EmployeeCnt EC, EmployeePaySalary EPS
		WHERE EL.EmployeeID = EC.EmployeeID AND EL.Manager = EPS.EmployeeID
	)
	UPDATE Employees
	SET Salary = EPS.Salary
	FROM EmployeePaySalary EPS
	WHERE Employees.EmployeeID = EPS.EmployeeID
	
Question24:在員工資料表中新增一欄位Seniority，其型態為int，值為該員工工作至2004-12-31的年資 (月份數、不足月不算) 。
	/*
	將Employees加上Seniority，type為integer，
	接著更新每個員工到'2004-12-31'的年資
	*/
	ALTER TABLE Employees ADD Seniority int
	GO
	UPDATE Employees 
	SET Employees.Seniority = DATEDIFF(mm, Employees.HireDate, '2004-12-31')

Question25:從Products表中刪除不再銷售的產品資訊。
	/*
	刪除Products裡Discontinued = 1的資料
	*/
	DELETE FROM Products WHERE Discontinued = 1;
